{"version":3,"sources":["components/ViewHeader.tsx","components/ViewSidebar.tsx","components/SelectionComponent.tsx","components/ViewContent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Text","Typography","ViewHeader","_ref","selectedFile","setSelectedFile","inputFile","useRef","react_default","a","createElement","type","ref","style","display","onChange","space","es_button","onClick","e","current","click","color","name","Title","CheckboxGroup","Checkbox","Group","ViewSidebar","plainOptions","checkedList","setCheckedList","_useState","useState","_useState2","Object","slicedToArray","indeterminate","setIndeterminate","_useState3","_useState4","checkAll","setCheckAll","width","level","textAlign","margin","divider","orientation","padding","es_checkbox","target","checked","flexDirection","options","value","list","length","borderLeft","SelectionComponent","Fragment","Panel","Collapse","to_points_array","points","result","forEach","p","push","x","y","extract_lane_lines","map","lane","lines","leftBoundarySegments","leftBoundary","curve","segment","rightBoundarySegments","rightBoundary","v","lineSegment","point","centralLines","centralCurve","rotation","x1","y1","x2","y2","Math","atan2","calculate_degree","id","boundary","central","shouldDraw","shouldDrawCentral","extract_stop_signs","stopSign","stopLine","extract_signals","signal","boundaryPoints","stopLinePoints","mappingLine","shoudDrawStopLine","shouldDrawMappingLine","ViewContent","windowRef","setWidth","height","setHeight","updateSize","offsetWidth","offsetHeight","window","addEventListener","useLayoutEffect","_ref2","asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","setTimeout","stop","apply","this","arguments","fn","_useState5","stageScaleX","stageScaleY","stageX","stageY","_useState6","konvaState","setKonvaState","_useState7","_useState8","drawerVisible","setDrawerVisible","_useState9","_useState10","stopSignPlain","setStopSignPlain","_useState11","_useState12","stopSignSelection","setStopSignSelection","_useState13","_useState14","signalPlain","setSignalPlain","_useState15","_useState16","signalSelection","setSignalSelection","_useState17","_useState18","lanePlain","setLanePlain","_useState19","_useState20","laneSelection","setLaneSelection","_useState21","_useState22","drawingData","setDrawingData","useEffect","initData","plainStopSignSelection","sort","plainSignalSelection","plainLaneSelection","position","backgroundColor","ReactKonva","draggable","onWheel","evt","preventDefault","stage","getStage","oldXScale","scaleX","oldYScale","scaleY","mousePointsTo","getPointerPosition","newXScale","deltaY","newYScale","offsetX","offsetY","index","idCounter","includes","i","key","stroke","strokeWidth","opacity","strokeScaleEnabled","text","fontSize","fill","elements","right","top","drawer","title","placement","visible","onClose","collapse","header","components_SelectionComponent","bottom","ViewContent_Text","concat","Header","Layout","Content","Sider","App","hdMap","setHdMap","mapData","setMapData","onFileSelected","App_regeneratorRuntime","root","MapMessage","reader","files","load","sent","lookupType","FileReader","onload","arrayBuffer","Uint8Array","decode","readAsArrayBuffer","_x","layout","minHeight","borderRight","components_ViewSidebar","components_ViewHeader","components_ViewContent","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.102e9204.chunk.js","sourcesContent":["import { Button, Space, Typography } from 'antd';\nimport React, { useRef } from 'react'\nimport { useState } from 'react'\n\nconst { Text } = Typography\n\ntype ViewHeaderProps = {\n  selectedFile;\n  setSelectedFile;\n}\n\nconst ViewHeader: React.FC<ViewHeaderProps> = ({ selectedFile, setSelectedFile }) => {\n  // const [selectedFile, setSelectedFile] = useState(null);\n  const inputFile = useRef<HTMLInputElement | null>(null);\n\n  const onFileSelected = (e) => {\n    e.preventDefault();\n    const file = e.target.files[0];\n    setSelectedFile(file);\n  }\n\n  return (\n    <div>\n      <input type='file' ref={inputFile} style={{ display: 'none' }} onChange={setSelectedFile} />\n      <Space>\n        <Button onClick={e => inputFile.current.click()}>Select File</Button>\n        <Text style={{ color: 'white' }}>\n          {selectedFile === null ? \"No File Selected\" : selectedFile.name}\n        </Text>\n      </Space>\n    </div>\n  )\n}\n\nexport default ViewHeader","import React, { useState } from 'react'\nimport { Checkbox, Divider, Space, Typography } from 'antd';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\nconst { Text, Title } = Typography;\nconst CheckboxGroup = Checkbox.Group;\n\ntype ViewSidebarProps = {\n  plainOptions;\n  checkedList;\n  setCheckedList;\n}\n\nconst ViewSidebar: React.FC<ViewSidebarProps> = ({ plainOptions, checkedList, setCheckedList }) => {\n\n  const [indeterminate, setIndeterminate] = useState(false);\n  const [checkAll, setCheckAll] = useState(true);\n\n  const onChange = (list: CheckboxValueType[]) => {\n    setCheckedList(list);\n    setIndeterminate(!!list.length && list.length < plainOptions.length);\n    setCheckAll(list.length === plainOptions.length);\n  };\n\n  const onCheckAllChange = (e: CheckboxChangeEvent) => {\n    setCheckedList(e.target.checked ? plainOptions : []);\n    setIndeterminate(false);\n    setCheckAll(e.target.checked);\n  };\n  return (\n    <div>\n      <div style={{ width: '100%' }}>\n        <Title level={5} style={{ textAlign: 'left', margin: '10px' }}>Hd Map Viewer</Title>\n      </div>\n      <div style={{ width: '100%' }}>\n        <Divider orientation='left'>Layers</Divider>\n        <div style={{ padding: 5 }}>\n          <Checkbox indeterminate={indeterminate} onChange={onCheckAllChange} checked={checkAll}>\n            Check all\n          </Checkbox>\n          <CheckboxGroup\n            style={{ display: 'flex', flexDirection: 'column' }}\n            options={plainOptions}\n            value={checkedList}\n            onChange={onChange}\n          />\n        </div>\n\n      </div>\n      <div style={{ width: '100%' }}>\n        <Divider orientation='left' style={{ borderLeft: '1px solid white' }}>Routes</Divider>\n      </div>\n    </div>\n  )\n}\n\nexport default ViewSidebar","import { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\nimport { Checkbox } from 'antd';\n\nimport React, { useState } from 'react'\ntype SelectionComponentProps = {\n    plainOptions;\n    checkedList;\n    setCheckedList;\n}\nconst SelectionComponent: React.FC<SelectionComponentProps> = ({ plainOptions, checkedList, setCheckedList }) => {\n\n    const [indeterminate, setIndeterminate] = useState(false);\n    const [checkAll, setCheckAll] = useState(true);\n\n    const onChange = (list: CheckboxValueType[]) => {\n        setCheckedList(list);\n        setIndeterminate(!!list.length && list.length < plainOptions.length);\n        setCheckAll(list.length === plainOptions.length);\n    };\n\n    const onCheckAllChange = (e: CheckboxChangeEvent) => {\n        setCheckedList(e.target.checked ? plainOptions : []);\n        setIndeterminate(false);\n        setCheckAll(e.target.checked);\n    };\n\n    return (\n        <>\n            <Checkbox indeterminate={indeterminate} onChange={onCheckAllChange} checked={checkAll}>\n                Check all\n            </Checkbox>\n            <Checkbox.Group\n                style={{ display: 'flex', flexDirection: 'column' }}\n                options={plainOptions}\n                value={checkedList}\n                onChange={onChange}\n            /></>\n    )\n}\n\nexport default SelectionComponent","import { KonvaEventObject } from 'konva/lib/Node';\nimport React, { useEffect, useLayoutEffect, useRef, useState } from 'react'\nimport { Layer, Rect, Line, Stage, Text as KonvaText, Group } from 'react-konva';\nimport { Map, Point } from '../types';\nimport { Button, Collapse, Drawer, Typography } from 'antd';\nimport { DrawingType, LaneDrawingType, SignalDrawingType, StopSignDrawingType } from '../types/drawing';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\nimport SelectionComponent from './SelectionComponent';\n\nconst { Text } = Typography;\nconst { Panel } = Collapse;\n\ntype ViewContentProps = {\n  map: Map;\n  checkedList: CheckboxValueType[];\n}\n\nconst to_points_array = (points: Point[]) => {\n  const result = [];\n  points.forEach(p => {\n    result.push(p.x);\n    result.push(p.y);\n  })\n  return result;\n}\n\nfunction calculate_degree(x1: number, y1: number, x2: number, y2: number): number {\n  let result = Math.atan2(y2 - y1, x2 - x1) * 57.2958;\n  if (result > 90) {\n    return result - 180;\n  }\n  return result\n}\n\nfunction extract_lane_lines(map: Map): LaneDrawingType[] {\n  const result: LaneDrawingType[] = [];\n\n  map.lane.forEach((value) => {\n    const lines = [];\n    const leftBoundarySegments = value.leftBoundary.curve.segment;\n    const rightBoundarySegments = value.rightBoundary.curve.segment;\n    leftBoundarySegments.forEach(v => {\n      lines.push(to_points_array(v.lineSegment.point));\n    })\n    rightBoundarySegments.forEach(v => {\n      lines.push(to_points_array(v.lineSegment.point));\n    })\n\n    const centralLines = [];\n    value.centralCurve.segment.forEach(v => {\n      centralLines.push(to_points_array(v.lineSegment.point))\n    })\n\n    const rotation = calculate_degree(centralLines[0][0], centralLines[0][1], centralLines[0][2], centralLines[0][3])\n    result.push({\n      id: value.id.id, x: centralLines[0][0], y: centralLines[0][1],\n      rotation: rotation,\n      boundary: lines,\n      central: centralLines,\n      shouldDraw: true, shouldDrawCentral: true\n    })\n  })\n\n  return result;\n}\n\nfunction extract_stop_signs(map: Map): StopSignDrawingType[] {\n  const result: StopSignDrawingType[] = [];\n  map.stopSign.forEach((value) => {\n    const points = to_points_array(value.stopLine[0].segment[0].lineSegment.point);\n    result.push({\n      id: value.id.id,\n      x: points[points.length - 2],\n      y: points[points.length - 1],\n      stopLine: points,\n      shouldDraw: true\n    })\n  })\n  return result;\n}\n\nfunction extract_signals(map: Map): SignalDrawingType[] {\n  const result: SignalDrawingType[] = [];\n\n\n  map.signal.forEach(value => {\n    const boundaryPoints = to_points_array(value.boundary.point);\n    const stopLinePoints = to_points_array(value.stopLine[0].segment[0].lineSegment.point);\n    result.push({\n      id: value.id.id,\n      x: boundaryPoints[0],\n      y: boundaryPoints[1],\n      points: boundaryPoints,\n      stopLine: stopLinePoints,\n      mappingLine: [boundaryPoints[0], boundaryPoints[1], stopLinePoints[2], stopLinePoints[3]],\n      shouldDraw: true,\n      shoudDrawStopLine: true,\n      shouldDrawMappingLine: true,\n    })\n  })\n  return result;\n}\n\nconst ViewContent: React.FC<ViewContentProps> = ({ map, checkedList }) => {\n\n  // Set up window size\n  const windowRef = useRef(null);\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const updateSize = () => {\n    setWidth(windowRef.current.offsetWidth);\n    setHeight(windowRef.current.offsetHeight);\n  }\n  window.addEventListener(\"resize\", updateSize);\n  useLayoutEffect(() => {\n    const fn = async () => {\n      setTimeout(() => updateSize(), 50)\n    }\n    fn();\n  }, []);\n\n\n  // Konva zoom\n  const [konvaState, setKonvaState] = useState({ stageScaleX: 1, stageScaleY: -1, stageX: 0, stageY: 0 });\n  const handleWheel = (e: KonvaEventObject<WheelEvent>) => {\n    e.evt.preventDefault();\n\n    const scaleBy = 1.2;\n    const stage = e.target.getStage();\n    const oldXScale = stage.scaleX();\n    const oldYScale = stage.scaleY();\n    const mousePointsTo = {\n      x: stage.getPointerPosition().x / oldXScale - stage.x() / oldXScale,\n      y: stage.getPointerPosition().y / oldYScale - stage.y() / oldYScale\n    }\n\n    const newXScale = e.evt.deltaY > 0 ? oldXScale * scaleBy : oldXScale / scaleBy;\n    const newYScale = e.evt.deltaY > 0 ? oldYScale * scaleBy : oldYScale / scaleBy;\n\n    setKonvaState({\n      stageScaleX: newXScale,\n      stageScaleY: newYScale,\n      stageX: -(mousePointsTo.x - stage.getPointerPosition().x / newXScale) * newXScale,\n      stageY: -(mousePointsTo.y - stage.getPointerPosition().y / newYScale) * newYScale\n    })\n  }\n\n  // controls\n  const [drawerVisible, setDrawerVisible] = useState(false);\n  const [stopSignPlain, setStopSignPlain] = useState<string[]>();\n  const [stopSignSelection, setStopSignSelection] = useState<string[]>();\n\n  const [signalPlain, setSignalPlain] = useState<string[]>();\n  const [signalSelection, setSignalSelection] = useState<string[]>();\n\n  const [lanePlain, setLanePlain] = useState<string[]>();\n  const [laneSelection, setLaneSelection] = useState<string[]>();\n\n\n  // drawing\n  const [drawingData, setDrawingData] = useState<DrawingType>({ stopSign: [], signal: [], lane: [] });\n\n  useEffect(() => {\n    const initData = {\n      stopSign: extract_stop_signs(map),\n      signal: extract_signals(map),\n      lane: extract_lane_lines(map)\n    }\n    setDrawingData(initData)\n\n    const plainStopSignSelection = initData.stopSign.map(v => v.id);\n    plainStopSignSelection.sort()\n    setStopSignPlain(plainStopSignSelection);\n    setStopSignSelection(plainStopSignSelection);\n\n    const plainSignalSelection = initData.signal.map(v => v.id);\n    plainSignalSelection.sort()\n    setSignalPlain(plainSignalSelection)\n    setSignalSelection(plainSignalSelection);\n\n    const plainLaneSelection = initData.lane.map(v => v.id);\n    plainLaneSelection.sort();\n    setLanePlain(plainLaneSelection);\n    setLaneSelection(plainLaneSelection);\n\n    return () => {\n    }\n  }, [])\n\n  return (\n    <div ref={windowRef} style={{ height: '100%', width: '100%', position: 'relative', backgroundColor: 'white' }}>\n      {windowRef && drawingData.lane.length > 0 && <Stage\n        width={width} height={height} draggable\n        onWheel={handleWheel} scaleX={konvaState.stageScaleX} scaleY={konvaState.stageScaleY}\n        x={konvaState.stageX} y={konvaState.stageY}\n        offsetX={drawingData.lane[0].x} offsetY={drawingData.lane[0].y}\n      >\n        <Layer id=\"lane\">\n          {\n            drawingData.lane.map((value, index) => {\n              // if (!laneSelection.includes(value.id)) return;\n              const result = [];\n              let idCounter = 0;\n              if (checkedList.includes(\"Lane Line\")) {\n                value.boundary.forEach((v, i) => {\n                  result.push(\n                    <Line key={idCounter++} points={v} stroke=\"black\"\n                      strokeWidth={1} opacity={\n                        laneSelection.includes(value.id) ? 0.5 : 0.1\n                      }\n                      strokeScaleEnabled={false}\n                    />\n                  )\n                })\n              }\n              if (checkedList.includes(\"Lane ID\")) {\n                result.push(\n                  <KonvaText key={idCounter++} x={value.x} y={value.y} text={value.id} fontSize={1} scaleY={-1}\n                    opacity={laneSelection.includes(value.id) ? 1 : 0.1}\n                    rotation={value.rotation}\n                  />\n                );\n              }\n              if (checkedList.includes(\"Lane Central Curve\")) {\n                value.central.forEach((v, i) => {\n                  result.push(\n                    <Line key={idCounter++} points={v} stroke=\"blue\"\n                      strokeWidth={1} opacity={\n                        laneSelection.includes(value.id) ? 0.5 : 0.1\n                      }\n                      strokeScaleEnabled={false} />\n                  )\n                })\n              }\n              return result;\n            })\n          }\n        </Layer>\n\n        {checkedList.includes(\"Stop Sign\") && <Layer id=\"stopSign\">\n          {drawingData.stopSign.map((value, index) => {\n            if (!stopSignSelection.includes(value.id)) return;\n            return [\n              <Line key={index * 10} points={value.stopLine} stroke=\"red\"\n                strokeWidth={1} opacity={0.5} />,\n              <KonvaText key={index * 10 + 1} x={value.x} y={value.y} text={value.id} fontSize={1} fill=\"red\" scaleY={-1} />\n            ]\n          })}\n        </Layer>}\n\n        <Layer id=\"Signal\">\n          {drawingData.signal.map((value, index) => {\n            if (!signalSelection.includes(value.id)) {\n              return <KonvaText key={index * 10 + 2} x={value.x} y={value.y} text={value.id} fontSize={1} opacity={0.5} fill='green' scaleY={-1} />\n            }\n            const elements = [];\n            if (checkedList.includes(\"Signal\")) {\n              elements.push(\n                <Line key={index * 10 + 1} points={value.points} stroke=\"green\"\n                  strokeWidth={1} strokeScaleEnabled={false} />\n              )\n              elements.push(\n                <KonvaText key={index * 10 + 2} x={value.x} y={value.y} text={value.id} fontSize={1} fill='green' scaleY={-1} />\n              )\n            }\n            if (checkedList.includes('Signal Stop Line')) {\n              elements.push(\n                <Line key={index * 10 + 3} points={value.stopLine} stroke=\"green\"\n                  strokeWidth={3} opacity={0.5} strokeScaleEnabled={false} />\n              )\n            }\n            if (checkedList.includes('Signal Mapping')) {\n              elements.push(\n                <Line key={index * 10 + 4}\n                  points={value.mappingLine}\n                  stroke=\"purple\" strokeWidth={2} opacity={0.5} strokeScaleEnabled={false} />\n              )\n            }\n            return elements;\n          })}\n        </Layer>\n      </Stage>}\n      <div style={{ position: 'absolute', right: 0, top: 0, padding: 5 }}>\n        <Button onClick={() => setDrawerVisible(!drawerVisible)}>Controls</Button>\n      </div>\n      <Drawer title=\"Controls\" placement='right' visible={drawerVisible} onClose={() => setDrawerVisible(false)}>\n        <Collapse>\n          <Panel header=\"Stop Sign\" key=\"1\">\n            <SelectionComponent plainOptions={stopSignPlain} checkedList={stopSignSelection} setCheckedList={setStopSignSelection} />\n          </Panel>\n          <Panel header=\"Signal\" key=\"2\">\n            <SelectionComponent plainOptions={signalPlain} checkedList={signalSelection} setCheckedList={setSignalSelection} />\n          </Panel>\n          <Panel header=\"Lane\" key=\"3\">\n            <SelectionComponent plainOptions={lanePlain} checkedList={laneSelection} setCheckedList={setLaneSelection} />\n          </Panel>\n        </Collapse>\n      </Drawer>\n      <div style={{ position: 'absolute', right: 0, bottom: 0, padding: 5 }}>\n        <Text>{`(${123123}, ${123123})`}</Text>\n      </div>\n    </div>\n  )\n}\n\nexport default ViewContent","import React from 'react';\nimport { Layout } from 'antd';\nimport ViewHeader from './components/ViewHeader';\nimport ViewSidebar from './components/ViewSidebar';\nimport ViewContent from './components/ViewContent';\nimport { useState } from 'react';\nimport { load } from 'protobufjs';\nimport { Map, Point } from './types';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\n\nconst { Header, Content, Sider } = Layout;\n\n\nfunction App() {\n  const [hdMap, setHdMap] = useState(null);\n  const [mapData, setMapData] = useState(null);\n\n  const onFileSelected = async (e) => {\n    setHdMap(e.target.files[0]);\n    const root = await load(\"./proto/map/map.proto\");\n    const MapMessage = root.lookupType(\"proto.hdmap.Map\");\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      let arrayBuffer = new Uint8Array(reader.result as ArrayBufferLike);\n      const map = MapMessage.decode(arrayBuffer);\n      setMapData(map);\n\n    }\n    reader.readAsArrayBuffer(e.target.files[0]);\n  }\n\n  const plainOptions = [\n    'Lane Line', 'Lane ID', 'Lane Central Curve',\n    'Stop Sign',\n    'Signal', 'Signal Stop Line', 'Signal Mapping'\n  ];\n  const [checkedList, setCheckedList] = useState<CheckboxValueType[]>(plainOptions);\n\n  return (\n    <Layout style={{ minHeight: '100vh' }}>\n      <Sider style={{ backgroundColor: 'white', borderRight: '1px solid black' }}>\n        <ViewSidebar plainOptions={plainOptions} checkedList={checkedList} setCheckedList={setCheckedList} />\n      </Sider>\n      <Layout>\n        <Header>\n          <ViewHeader selectedFile={hdMap} setSelectedFile={onFileSelected} />\n        </Header>\n        <Content>\n          {mapData && <ViewContent map={mapData as undefined as Map} checkedList={checkedList} />}\n        </Content>\n      </Layout>\n    </Layout>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>\n  <>\n    <App />\n  </>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}